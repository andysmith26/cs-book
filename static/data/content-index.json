{
  "projects": [
    {
      "slug": "asteroids",
      "path": "projects/asteroids/index.md",
      "title": "Asteroids",
      "layout": "project",
      "courseFit": [
        {
          "course": "csa",
          "unit": "09-inheritance"
        }
      ],
      "skillsRequired": [
        {
          "id": "oop/classes-objects",
          "level": 2
        },
        {
          "id": "oop/inheritance",
          "level": 2
        },
        {
          "id": "programming/conditionals",
          "level": 2
        },
        {
          "id": "programming/iteration",
          "level": 2
        }
      ],
      "skillsSuggested": [
        {
          "id": "oop/polymorphism",
          "level": 1
        },
        {
          "id": "tooling/git-basics",
          "level": 1
        }
      ],
      "prerequisites": [
        {
          "type": "skill",
          "id": "programming/methods",
          "level": 1
        }
      ],
      "status": "current",
      "tags": [
        "java",
        "greenfoot",
        "oop",
        "game"
      ],
      "legacySource": "instructions/Asteroids/",
      "lastUpdated": "2025-09-05"
    },
    {
      "slug": "chemotaxis",
      "path": "projects/chemotaxis/index.md",
      "title": "Chemotaxis",
      "layout": "project",
      "courseFit": [
        {
          "course": "csa",
          "unit": "06-arrays"
        }
      ],
      "skillsRequired": [
        {
          "id": "programming/arrays",
          "level": 2
        },
        {
          "id": "programming/iteration",
          "level": 2
        },
        {
          "id": "oop/classes-objects",
          "level": 1
        }
      ],
      "skillsSuggested": [
        {
          "id": "programming/methods",
          "level": 1
        },
        {
          "id": "tooling/git-basics",
          "level": 1
        }
      ],
      "status": "current",
      "tags": [
        "java",
        "processing",
        "simulation",
        "arrays"
      ],
      "legacySource": "instructions/Chemotaxis/",
      "lastUpdated": "2025-09-05"
    },
    {
      "slug": "cyoa",
      "path": "projects/cyoa/index.md",
      "title": "Choose Your Own Adventure (CYOA)",
      "layout": "project",
      "courseFit": [
        {
          "course": "csp",
          "unit": "03-algorithms-programming"
        },
        {
          "course": "csp",
          "unit": "04-computer-systems-networks"
        }
      ],
      "skillsRequired": [
        {
          "id": "web/html-basics",
          "level": 1
        },
        {
          "id": "web/hyperlink-graphs",
          "level": 1
        }
      ],
      "skillsSuggested": [
        {
          "id": "web/css-basics",
          "level": 1
        },
        {
          "id": "tooling/git-basics",
          "level": 1
        }
      ],
      "status": "current",
      "tags": [
        "html",
        "css",
        "ux",
        "narrative"
      ],
      "legacySource": "instructions/cyoa/",
      "lastUpdated": "2025-09-05"
    },
    {
      "slug": "game-of-sticks",
      "path": "projects/game-of-sticks/index.md",
      "title": "Game of Sticks: Build an AI That Learns",
      "layout": "project",
      "courseFit": [
        {
          "course": "ai",
          "unit": "02-reinforcement-learning"
        },
        {
          "course": "csp",
          "unit": "03-algorithms-programming"
        },
        {
          "course": "math",
          "unit": "discrete-probability"
        }
      ],
      "skillsRequired": [
        {
          "id": "programming/iteration",
          "level": 1
        },
        {
          "id": "programming/conditionals",
          "level": 1
        }
      ],
      "skillsSuggested": [
        {
          "id": "programming/arrays",
          "level": 1
        },
        {
          "id": "tooling/debugging",
          "level": 1
        }
      ],
      "status": "current",
      "tags": [
        "ai",
        "game",
        "interactive",
        "learning"
      ],
      "lastUpdated": "2025-01-14"
    }
  ],
  "skills": [
    {
      "id": "ai/reinforcement-learning",
      "title": "Reinforcement Learning Basics",
      "category": "ai",
      "path": "skills/ai/reinforcement-learning/index.js",
      "description": "Implement learning through trial, error, and reward",
      "apAlignment": {
        "cspBigIdea": "Algorithms",
        "aiStandard": "K12-AI.3-5.DL.1"
      },
      "levels": {
        "1": "Understand reward/punishment concept",
        "2": "Implement basic Q-learning or probability adjustment",
        "3": "Optimize learning rates and exploration strategies",
        "4": "Apply RL to complex environments"
      },
      "prerequisites": [
        "math/probability-basics",
        "programming/arrays"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Reinforcement learning: AI learns by trying actions and \n      remembering what worked. Like training a pet - reward \n      good behavior, discourage bad behavior.\n    ",
        "interactiveDemo": "rl-ball-and-hat-simulator"
      },
      "practice": {
        "shortDrill": "reward-calculation",
        "conceptCheck": "identify-rl-components",
        "miniTask": "train-simple-agent"
      },
      "projectsUsing": [
        "game-of-sticks",
        "smart-rockets",
        "maze-solver"
      ],
      "hasContent": true
    },
    {
      "id": "math/modular-arithmetic",
      "title": "Modular Arithmetic",
      "category": "math",
      "path": "skills/math/modular-arithmetic/index.js",
      "description": "Use remainder operations to identify patterns and cycles in sequences",
      "apAlignment": {
        "cspBigIdea": "Algorithms",
        "mathStandard": "HSA.APR.1"
      },
      "levels": {
        "1": "Calculate remainders and identify when remainder is 0",
        "2": "Use modular arithmetic to find patterns in game positions",
        "3": "Apply modular arithmetic to cryptography or hash functions",
        "4": "Prove properties using modular arithmetic"
      },
      "prerequisites": [
        "programming/operators",
        "math/division"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Modular arithmetic finds the remainder after division.\n      17 mod 4 = 1 (because 17 = 4×4 + 1)\n      \n      In Game of Sticks, positions where (n-1) mod 4 = 0 are losing positions!\n    ",
        "references": [
          {
            "title": "Khan Academy: Modular Arithmetic",
            "url": "..."
          },
          {
            "title": "Interactive Modulo Visualizer",
            "url": "..."
          }
        ]
      },
      "practice": {
        "shortDrill": "modulo-calculator-drill",
        "apStyle": "pattern-finding-mcq",
        "miniTask": "find-cycle-length"
      },
      "projectsUsing": [
        "game-of-sticks",
        "cryptography-basics",
        "hash-tables"
      ],
      "hasContent": true
    },
    {
      "id": "oop/classes-objects",
      "title": "Classes & Objects",
      "category": "oop",
      "path": "skills/oop/classes-objects/index.js",
      "description": "Create and use classes to model objects with state and behavior",
      "apAlignment": {
        "csaUnit": "05-writing-classes"
      },
      "levels": {
        "1": "Instantiate objects and access fields/methods.",
        "2": "Design a class with state and behavior; enforce encapsulation.",
        "3": "Decompose a system into cooperating classes with clear contracts."
      },
      "prerequisites": [
        "programming/variables",
        "programming/methods"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Classes are blueprints for creating objects. An object is an instance of a class\n      that has its own state (fields) and behavior (methods).\n      \n      In Java: class Car { ... }  →  Car myCar = new Car();\n    ",
        "references": [
          {
            "title": "Java class & object basics",
            "url": "https://docs.oracle.com/javase/tutorial/java/javaOO/"
          },
          {
            "title": "Greenfoot/Processing docs: creating objects",
            "url": "https://www.greenfoot.org/doc"
          }
        ]
      },
      "practice": {
        "conceptCheck": "identify-class-vs-object",
        "miniTask": "write-simple-car-class",
        "projectTask": "design-cooperating-classes"
      },
      "projectsUsing": [
        "greenfoot-scenarios",
        "processing-animations"
      ],
      "hasContent": true
    },
    {
      "id": "oop/inheritance",
      "title": "Inheritance",
      "category": "oop",
      "path": "skills/oop/inheritance/index.js",
      "description": "Use inheritance to create specialized classes that extend base functionality",
      "apAlignment": {
        "csaUnit": "09-inheritance"
      },
      "levels": {
        "1": "Create a simple subclass that extends a concrete superclass and overrides one method correctly.",
        "2": "Design a shallow hierarchy with appropriate fields/methods; use super and override with correct access and contracts.",
        "3": "Refactor a hierarchy for reuse; choose inheritance vs composition and justify."
      },
      "prerequisites": [
        "oop/classes-objects",
        "programming/methods"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Inheritance lets you create specialized classes based on existing classes.\n      The subclass inherits all non-private fields and methods from the superclass\n      and can override methods to change behavior.\n      \n      Example: class Student extends Person { ... }\n    ",
        "references": [
          {
            "title": "Official Java tutorials on inheritance",
            "url": "https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html"
          },
          {
            "title": "Greenfoot docs: subclassing Actor",
            "url": "https://www.greenfoot.org/doc"
          }
        ]
      },
      "practice": {
        "conceptCheck": "inheritance-vs-composition",
        "miniTask": "extend-actor-add-movement",
        "projectTask": "refactor-similar-classes-superclass"
      },
      "projectsUsing": [
        "greenfoot-scenarios",
        "game-entities"
      ],
      "hasContent": true
    },
    {
      "id": "programming/arrays",
      "title": "Arrays",
      "category": "programming",
      "path": "skills/programming/arrays/index.js",
      "description": "Store and manipulate collections of data using arrays",
      "apAlignment": {
        "csaUnit": "06-arrays"
      },
      "levels": {
        "1": "Declare, allocate, index, and update arrays of primitives/objects.",
        "2": "Traverse with indices and for-each; write search/count/transform patterns.",
        "3": "Design array-based models with invariants and clear ownership of state."
      },
      "prerequisites": [
        "programming/variables",
        "programming/iteration"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Arrays store multiple values of the same type in a single variable.\n      Access elements by index: arr[0] is the first element.\n      Arrays have fixed size once created: int[] numbers = new int[10];\n    ",
        "references": [
          {
            "title": "Array declaration and traversal patterns",
            "url": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"
          }
        ]
      },
      "practice": {
        "shortDrill": "array-indexing-practice",
        "miniTask": "reverse-array-in-place",
        "projectTask": "compute-running-totals"
      },
      "projectsUsing": [
        "data-analysis",
        "game-high-scores",
        "sorting-algorithms"
      ],
      "hasContent": true
    },
    {
      "id": "programming/conditionals",
      "title": "Conditionals",
      "category": "programming",
      "path": "skills/programming/conditionals/index.js",
      "description": "Control program flow using boolean expressions and conditional statements",
      "apAlignment": {
        "csaUnit": "03-booleans-if",
        "cspBigIdea": "Algorithms & Programming"
      },
      "levels": {
        "1": "Write simple if/else statements using boolean expressions.",
        "2": "Combine logical operators; structure nested conditionals for clarity.",
        "3": "Refactor complex conditionals using guard clauses or polymorphism."
      },
      "prerequisites": [
        "programming/variables"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Conditionals let your program make decisions based on data.\n      Use if/else to execute different code paths:\n      \n      if (score >= 90) {\n          grade = \"A\";\n      } else if (score >= 80) {\n          grade = \"B\";\n      } else {\n          grade = \"C\";\n      }\n    ",
        "references": [
          {
            "title": "If/else basics in Java",
            "url": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html"
          },
          {
            "title": "Boolean operators (&&, ||, !)",
            "url": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html"
          }
        ]
      },
      "practice": {
        "shortDrill": "boolean-expression-evaluation",
        "miniTask": "method-returns-different-strings",
        "projectTask": "number-guessing-game"
      },
      "projectsUsing": [
        "text-adventure",
        "grade-calculator",
        "game-logic"
      ],
      "hasContent": true
    },
    {
      "id": "programming/iteration",
      "title": "Iteration",
      "category": "programming",
      "path": "skills/programming/iteration/index.js",
      "description": "Repeat actions using loops and understand iteration patterns",
      "apAlignment": {
        "csaUnit": "04-iteration",
        "cspBigIdea": "Algorithms & Programming"
      },
      "levels": {
        "1": "Use counted and conditional loops to repeat actions a fixed/unknown number of times.",
        "2": "Traverse arrays/collections safely; avoid off-by-one; choose while/for/for-each appropriately.",
        "3": "Restructure nested loops for complexity/clarity; explain loop invariants."
      },
      "prerequisites": [
        "programming/variables",
        "programming/conditionals"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Loops let you repeat code efficiently. Three main types:\n      \n      for (int i = 0; i < 10; i++) { ... }     // counted loop\n      while (condition) { ... }                // conditional loop  \n      for (String item : collection) { ... }   // for-each loop\n    ",
        "references": [
          {
            "title": "For/while/for-each overview",
            "url": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html"
          }
        ]
      },
      "practice": {
        "shortDrill": "loop-tracing-exercises",
        "miniTask": "count-occurrences-in-array",
        "projectTask": "animate-stepwise-random-walk"
      },
      "projectsUsing": [
        "simulation",
        "data-processing",
        "animation"
      ],
      "hasContent": true
    },
    {
      "id": "tooling/git-basics",
      "title": "Git & GitHub Basics",
      "category": "tooling",
      "path": "skills/tooling/git-basics/index.js",
      "description": "Use Git for version control and GitHub for collaboration",
      "apAlignment": {},
      "levels": {
        "1": "Clone/fork, commit, push; submit via GitHub link.",
        "2": "Branch for features; open pull requests; resolve simple conflicts.",
        "3": "Structure repos; write actionable commits and READMEs."
      },
      "prerequisites": [],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Git tracks changes to your code over time. Key workflow:\n      1. Clone a repository: git clone <url>\n      2. Make changes to files\n      3. Stage changes: git add .\n      4. Commit changes: git commit -m \"Description\"\n      5. Push to GitHub: git push\n    ",
        "references": [
          {
            "title": "Git basics: add/commit/push",
            "url": "https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository"
          },
          {
            "title": "GitHub workflow guide",
            "url": "https://guides.github.com/introduction/flow/"
          }
        ]
      },
      "practice": {
        "conceptCheck": "git-workflow-understanding",
        "miniTask": "make-change-on-branch-open-pr",
        "projectTask": "structure-repo-with-readme"
      },
      "projectsUsing": [
        "all-coding-projects"
      ],
      "hasContent": true
    },
    {
      "id": "web/html-basics",
      "title": "HTML Basics",
      "category": "web",
      "path": "skills/web/html-basics/index.js",
      "description": "Structure web pages using HTML elements and semantic markup",
      "apAlignment": {
        "cspBigIdea": "Computer Systems & Networks"
      },
      "levels": {
        "1": "Structure a page with semantic elements and valid nesting; link assets.",
        "2": "Compose multi-page sites with consistent layout and accessible markup.",
        "3": "Author reusable fragments; reason about document outline and ARIA basics."
      },
      "prerequisites": [],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      HTML (HyperText Markup Language) structures web content using elements:\n      \n      <h1>Title</h1>\n      <p>Paragraph with <a href=\"url\">link</a></p>\n      <img src=\"image.jpg\" alt=\"Description\">\n      \n      Use semantic elements like <header>, <main>, <nav>, <article>\n    ",
        "references": [
          {
            "title": "HTML elements and document structure",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML"
          },
          {
            "title": "HTML validator",
            "url": "https://validator.w3.org/"
          }
        ]
      },
      "practice": {
        "conceptCheck": "semantic-vs-presentational-markup",
        "miniTask": "build-simple-multi-section-page",
        "projectTask": "validate-accessible-markup"
      },
      "projectsUsing": [
        "personal-website",
        "portfolio-site"
      ],
      "hasContent": true
    },
    {
      "id": "web/hyperlink-graphs",
      "title": "Hyperlink & Navigation",
      "category": "web",
      "path": "skills/web/hyperlink-graphs/index.js",
      "description": "Design navigable website structures using hyperlinks and understanding information architecture",
      "apAlignment": {
        "cspBigIdea": "Computer Systems & Networks"
      },
      "levels": {
        "1": "Create internal/external links and a simple branching structure.",
        "2": "Design navigable graphs (breadcrumbs, back-links) minimizing dead ends.",
        "3": "Model complex flows; visualize and test link graphs for UX clarity."
      },
      "prerequisites": [
        "web/html-basics"
      ],
      "status": "current",
      "lastUpdated": "2025-09-06",
      "learn": {
        "explainer": "\n      Web navigation is about creating logical paths between pages:\n      \n      <a href=\"page.html\">Internal link</a>\n      <a href=\"https://example.com\">External link</a>\n      <a href=\"../parent/file.html\">Relative path</a>\n      \n      Think of your site as a graph where nodes are pages and edges are links.\n    ",
        "references": [
          {
            "title": "Internal vs external links, relative paths",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks"
          },
          {
            "title": "Information architecture basics",
            "url": "https://www.usability.gov/what-and-why/information-architecture.html"
          }
        ]
      },
      "practice": {
        "conceptCheck": "link-types-and-paths",
        "miniTask": "turn-sketch-into-6-page-link-graph",
        "projectTask": "design-complex-site-navigation"
      },
      "projectsUsing": [
        "multi-page-website",
        "documentation-site"
      ],
      "hasContent": true
    },
    {
      "id": "programming/variables",
      "title": "Variables & Types",
      "category": "programming",
      "path": "skills/programming/variables/index.js",
      "apAlignment": {
        "csaUnit": "01-primitive-types"
      },
      "levels": {},
      "prerequisites": [],
      "status": "missing",
      "lastUpdated": "2025-09-06",
      "hasContent": false
    },
    {
      "id": "programming/methods",
      "title": "Methods & Parameters",
      "category": "programming",
      "path": "skills/programming/methods/index.js",
      "apAlignment": {
        "csaUnit": "05-writing-classes"
      },
      "levels": {},
      "prerequisites": [],
      "status": "missing",
      "lastUpdated": "2025-09-06",
      "hasContent": false
    },
    {
      "id": "oop/polymorphism",
      "title": "Polymorphism",
      "category": "oop",
      "path": "skills/oop/polymorphism/index.js",
      "apAlignment": {
        "csaUnit": "09-inheritance"
      },
      "levels": {},
      "prerequisites": [],
      "status": "missing",
      "lastUpdated": "2025-09-06",
      "hasContent": false
    },
    {
      "id": "web/css-basics",
      "title": "CSS Basics",
      "category": "web",
      "path": "skills/web/css-basics/index.js",
      "apAlignment": {
        "cspBigIdea": "Computer Systems & Networks"
      },
      "levels": {},
      "prerequisites": [],
      "status": "missing",
      "lastUpdated": "2025-09-06",
      "hasContent": false
    }
  ],
  "generated": "2025-09-06T20:46:07.491Z",
  "version": "2.0"
}